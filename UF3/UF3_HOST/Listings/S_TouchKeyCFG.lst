C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     08/11/2018 09:55:23 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE S_TOUCHKEYCFG
OBJECT MODULE PLACED IN .\Objects\S_TouchKeyCFG.obj
COMPILER INVOKED BY: D:\keil4\C51\BIN\C51.EXE lib\S_TouchKeyCFG.C OPTIMIZE(8,SPEED) BROWSE INCDIR(.\H;.\lib) DEBUG OBJEC
                    -TEXTEND PRINT(.\Listings\S_TouchKeyCFG.lst) TABS(2) OBJECT(.\Objects\S_TouchKeyCFG.obj)

line level    source

   1          //*************************************************************************************************
   2          //  Copyright (c)   深圳市赛元微电子有限公司
   3          //  文件名称  :  S_TouchKeyCFG.c
   4          //  作者    : 
   5          //  模块功能  :  触控键配置文件
   6          //  版本    :
   7          //  更改记录  :
   8          //  注意事项  :  用户需要配置的文件在S_TouchKeyCFG.h中
   9          //  库版本标记  : 
  10          //************************************************************************************************
  11          
  12          #include "lib\S_TouchKeyCFG.h"
  13          
  14          //===========================================================================
  15          //寄存器定义
  16          /*TouchKey*/
  17          sfr     TKCON   = 0XE8;
  18          sfr     TKCFG1  = 0XE2;
  19          sfr     TKCFG0  = 0XE1;
  20          
  21          /*PSW*/
  22          sfr   PSW     =   0xD0; //程序状态字
  23          sbit  CY    =   PSW^7;  //进位
  24          
  25          //===========================================================================
  26          //全局变量定义
  27          unsigned  char  xdata SOCAPI_TouchKeyStatus;          //API接口状态：bit7-一轮扫描完成标志  1:完成  0：未完成
  28                                            //         bit6-通道触摸计数溢出标志 1:溢出  0:未溢出
  29          //===============================================================================
  30          //全局变量声明：该区域不可修改
  31          unsigned  int   xdata RawData [SOCAPI_SET_TOUCHKEY_TOTAL];      
  32          unsigned  int   xdata BaseLine[SOCAPI_SET_TOUCHKEY_TOTAL];
  33          unsigned    int   xdata FilterData[SOCAPI_SET_TOUCHKEY_TOTAL];                        
  34          unsigned  char    idata RestAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL];       
  35          unsigned  char    idata TouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];        
  36          unsigned  char    idata NoTouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];        
  37          unsigned  char  xdata CurrentChannel[SOCAPI_SET_TOUCHKEY_TOTAL];               
  38          unsigned  char  xdata ConfirmTouchCnt=SOCAPI_SET_TOUCHKEY_CONFIRM_CNT;  
  39          unsigned    char    idata   LowFingerDataCnt[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  40          
  41          int     xdata   DifferAccum[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  42          char  xdata SetNoiseThreshold=SOCAPI_SET_NOISE_THRESHOLD;
  43          
  44          //自定义变量
  45          unsigned  int   xdata  UpdateBaseLNum;            // 单键长按计数器
  46          unsigned  int   xdata  MultipleLNum;            // 多按键干扰计数
  47          
  48          //外部变量接口
  49          extern  unsigned  char  data    CurrentChannelMax;    //当前选中的keysensor的个数
  50          extern  bit bMultiple;  //多按键标志  
  51          extern  bit GetIsNeedUpdateBaseline(void);
  52          extern  void SetNeedUpdateBaseline(void);
  53          extern  unsigned  int SensorKeyFlag(void);
  54          extern  void MultipleDeal(unsigned char CycleCnt);
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     08/11/2018 09:55:23 PAGE 2   

  55          
  56          
  57          
  58          //宏定义接口
  59          
  60          //================================================================================= 
  61          // 函数接口调用部分
  62          
  63          //************************************************************************
  64          // 函数功能:  按键最长的输出时间
  65          // 输入: 无
  66          // 输出: 复位时间
  67          //这个返回值的设置， 是根据有多长时间启动TouchKeyRestart（）一次
  68          //例如12ms 启动一次， 那900*12ms = 10800ms, 10.8s 此按键无效。
  69          //************************************************************************
  70          unsigned int SetOneKeyPushResetTime(void)   
  71          {
  72   1        return SOCAPI_SET_KEY_CONTI_TIME;  
  73   1      }
  74          
  75          //************************************************************************
  76          // 函数功能:  动态更新基线的时间
  77          // 输入: 无
  78          // 输出: 
  79          //************************************************************************
  80          
  81          unsigned int SetFlowResetTime(void)   
  82          {
  83   1        return SOCAPI_SET_SYNC_UPDATE; 
  84   1      }
  85          
  86          //************************************************************************
  87          // 函数功能: 更新速度 
  88          // 输入: 无
  89          // 输出:阈值
  90          // 备注: 定义阈值大小， 可选的值0~255.一般设置为120，较大的参数数值
  91          // 能够产生较慢的基本线更新速度。
  92          //************************************************************************
  93          
  94          int  GetBaselineUpdateThreshold(void)
  95          {
  96   1        return SOCAPI_SET_UPDATE_SPEED; 
  97   1      }
  98          
  99          //************************************************************************
 100          // 函数功能: 初始化自动校准次数 
 101          // 输入: 无
 102          // 输出:阈值
 103          // 备注: 定义阈值大小， 可选的值0~100一般设置为48
 104          //************************************************************************
 105          unsigned char GetInitAutoUpdateTime(void)
 106          {
 107   1        return SOCAPI_INIT_AUTO_UPDATE_TIME; 
 108   1      }
 109          
 110          //************************************************************************
 111          // 函数功能: 进行CS 测试
 112          // 输入: 无
 113          // 输出: 
 114          // 备注: 
 115          //************************************************************************
 116          char GetCsFunction(void)
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     08/11/2018 09:55:23 PAGE 3   

 117          {
 118   1        return SOCAPI_SET_CS_FUNCTION; 
 119   1      }
 120          
 121          //************************************************************************
 122          //函数功能: 获取当前的finger 值
 123          //输入: index 
 124          //输出: 输出手指阈值
 125          //************************************************************************
 126          int code FingerThresholdtmp[16]={\
 127              SOCAPI_KEY0_FINGER_THRESHOLD,\
 128              SOCAPI_KEY1_FINGER_THRESHOLD,\
 129              SOCAPI_KEY2_FINGER_THRESHOLD,\
 130              SOCAPI_KEY3_FINGER_THRESHOLD,\
 131              SOCAPI_KEY4_FINGER_THRESHOLD,\
 132              SOCAPI_KEY5_FINGER_THRESHOLD,\
 133              SOCAPI_KEY6_FINGER_THRESHOLD,\
 134              SOCAPI_KEY7_FINGER_THRESHOLD,\
 135              SOCAPI_KEY8_FINGER_THRESHOLD,\
 136              SOCAPI_KEY9_FINGER_THRESHOLD,\
 137              SOCAPI_KEY10_FINGER_THRESHOLD,\
 138              SOCAPI_KEY11_FINGER_THRESHOLD,\
 139              SOCAPI_KEY12_FINGER_THRESHOLD,\
 140              SOCAPI_KEY13_FINGER_THRESHOLD,\
 141              SOCAPI_KEY14_FINGER_THRESHOLD,\
 142              SOCAPI_KEY15_FINGER_THRESHOLD,    
 143            };
 144          
 145          int  GetCurrFingerValue(unsigned char i)
 146          {
 147   1        return FingerThresholdtmp[CurrentChannel[i]]; 
 148   1      }
 149          //************************************************************************
 150          //函数功能:检测是否是弹簧滑条或者双键
 151          //输入: 无 
 152          //输出: =1 表示是滑条或者是双键
 153          //
 154          //************************************************************************
 155          unsigned char IsDoubleKeyOrSlideKey(void)
 156          {
 157   1      #if (SOCAPI_SET_SLIDE_KEY_FUNCTION)
                return 1;
              #else
 160   1        return 0; 
 161   1      #endif 
 162   1      
 163   1      }
 164          //************************************************************************
 165          //函数功能:检测按键弹起次数
 166          //输入: 无 
 167          //输出: 返回按键弹起确认次数
 168          //
 169          //************************************************************************
 170          
 171          unsigned char GetUpConfirmCnt(void)
 172          {
 173   1        return ConfirmTouchCnt>>1;
 174   1      }
 175          
 176          //************************************************************************
 177          //函数功能:获取按键抑制确认次数
 178          //输入: 无 
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     08/11/2018 09:55:23 PAGE 4   

 179          //输出: 返回抑制次数
 180          //
 181          //************************************************************************
 182          
 183          unsigned char GetTKYzCnt(void)
 184          {
 185   1        return (ConfirmTouchCnt/3);
 186   1      }
 187          
 188          //************************************************************************
 189          //函数功能:获取按键抑制区间
 190          //输入: 无 
 191          //输出: 返回抑制区间
 192          //
 193          //************************************************************************
 194          int GetTKYzThreshold(unsigned char i)
 195          { 
 196   1        int SetFingerThresholdtmp; 
 197   1        
 198   1        SetFingerThresholdtmp = GetCurrFingerValue(i); 
 199   1        SetFingerThresholdtmp = SetFingerThresholdtmp*SOCAPI_INHIBITION_ZONE/10;
 200   1        return SetFingerThresholdtmp;
 201   1      }
 202          
 203          //*************************************************************
 204          // 函数名 ：void CurrentSensorChoose(void)
 205          // 作者   ：
 206          // 功能   ：当前通道选择
 207          // 参数   ：无
 208          // 返回值 ：无
 209          // 调用全局变量：无
 210          // 修改全局变量：无
 211          // 备注   ：
 212          //**************************************************************
 213          void CurrentSensorChoose(void)
 214          {
 215   1        unsigned char   i;
 216   1        unsigned char   Ctk_Channel_mark = 0;
 217   1        unsigned int  CurrentSensorKey; 
 218   1        
 219   1        CurrentSensorKey = SOCAPI_SET_TOUCHKEY_CHANNEL; 
 220   1          
 221   1        for(i=0;i<16;i++)
 222   1        {
 223   2          CurrentSensorKey=CurrentSensorKey>>1;
 224   2          if(CY)
 225   2          {
 226   3            CurrentChannel[Ctk_Channel_mark] = i;           //选择触摸当前的通道
 227   3            Ctk_Channel_mark++;
 228   3            if(Ctk_Channel_mark >= SOCAPI_SET_TOUCHKEY_TOTAL)
 229   3              break;
 230   3          }   
 231   2        }
 232   1        CurrentChannelMax = Ctk_Channel_mark;             //当前选择的按键数 
 233   1      }
 234          
 235          //*************************************************************
 236          // 函数名 ：void TouchKeyCFGInit(void)
 237          // 作者   ：
 238          // 功能   ：初始化TK 寄存器等
 239          // 参数   ：无
 240          // 返回值 ：无
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     08/11/2018 09:55:23 PAGE 5   

 241          // 调用全局变量：无
 242          // 修改全局变量：无
 243          // 备注   ：
 244          //**************************************************************
 245          void TouchKeyCFGInit(void)
 246          {
 247   1        CurrentSensorChoose(); 
 248   1        TKCON = 0x80;                 //打开Touch Key电源;选择内建稳压源;    
 249   1          TKCFG0 = ((SOCAPI_SET_TKCFG3&0x0f)<<4)|(SOCAPI_SET_TKCFG2&0x0f);
 250   1          TKCFG1 = ((SOCAPI_SET_TKCFG1&0x10)<<3)|(SOCAPI_SET_TKCFG2&0x30)|((SOCAPI_SET_TKCFG3&0x70)>>4);   
 251   1        UpdateBaseLNum = 0; 
 252   1      }
 253          
 254          //*************************************************************
 255          //      检测按键接口
 256          //输入: 无
 257          //输出:按键通道， 返回的是一个int , 通道数。 
 258          //备注: 这个函数完成了几个内容
 259          //  1, 调用触控库检测函数SensorKeyFlag()
 260          // 2,  分析得出16个通道，哪个通道有按下，按下bit 位设置为1，否则为0
 261          // 3,  检测是否需要立即更新baseline:  大于MAX_KEY_RESET_BASELINE 个按键按下时立即更新baseline
 262          // 4,  双键或者单键按下时， 时间大于SetOneKeyPushResetTime()结果时更新baseline 
 263          //*************************************************************
 264          unsigned int TouchKeyScan(void)
 265          {
 266   1        unsigned char t;
 267   1        unsigned char MultipleCnt = 0;//按键计数
 268   1        unsigned int Keyvalue; 
 269   1        unsigned int KeyData = 0;   
 270   1      
 271   1        if(GetIsNeedUpdateBaseline() == 0)        //检测是否需要更新baseline 
 272   1        {
 273   2          Keyvalue = SensorKeyFlag();         //Sensor判断, 这里如果bMultiple = 1 表示中间有干扰
 274   2                                  //分析按键，得出标准的16通道bit 位
 275   2          for(t=0;t<CurrentChannelMax;t++)
 276   2          {
 277   3            Keyvalue = Keyvalue>>1;
 278   3            if(CY)
 279   3            {
 280   4              KeyData |= (0x01 << (CurrentChannel[t]));   
 281   4              MultipleCnt++;              
 282   4            }
 283   3          }
 284   2      
 285   2          if(MultipleCnt >= 2)                    //进入多按键处理
 286   2          {
 287   3            
 288   3            bMultiple = 1;
 289   3            
 290   3            if(MultipleCnt >= SOCAPI_MAX_KEY_NUM_INVALID)
 291   3            {
 292   4              SetNeedUpdateBaseline();              // 立即更新baseline ,例如亚克力板盖上去
 293   4            }
 294   3            else
 295   3            {   
 296   4              #if (SOCAPI_SET_SLIDE_KEY_FUNCTION)   //弹簧滑条的滑条键按下则不认为是多键
                        bMultiple=0; 
                      #endif  
 299   4            }     
 300   3          }     
 301   2      
 302   2          if(bMultiple == 0)              //进入按键判断
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     08/11/2018 09:55:23 PAGE 6   

 303   2          {   
 304   3            if(KeyData != 0x0)              //单个按键达到多长时间就update baseline ,松手检测
 305   3            {
 306   4              UpdateBaseLNum++; 
 307   4            }
 308   3            else  
 309   3            {
 310   4              UpdateBaseLNum = 0;   
 311   4            } 
 312   3          } 
 313   2          else
 314   2          {   
 315   3              //考虑基线更新    
 316   3            MultipleLNum++; 
 317   3            KeyData = 0x00;
 318   3          }
 319   2      
 320   2          if(UpdateBaseLNum > SetOneKeyPushResetTime())   //按键超出最长输出时间更新基线
 321   2          {
 322   3            SetNeedUpdateBaseline(); 
 323   3            UpdateBaseLNum = 0;
 324   3          }
 325   2          if(MultipleLNum > SOCAPI_MAX_KEY_MUTIPLE)     //干扰计数大于最大计数更新基线
 326   2          {
 327   3            SetNeedUpdateBaseline(); 
 328   3            MultipleLNum = 0;
 329   3          }
 330   2        
 331   2        }     
 332   1        else
 333   1        {
 334   2          MultipleDeal(SOCAPI_AUTO_UPDATE_TIME);                    //基线复位处理
 335   2        }
 336   1        
 337   1        return KeyData;
 338   1      }
 339          
 340          
 341          
 342          
 343          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    385    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =     43    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =     16    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
